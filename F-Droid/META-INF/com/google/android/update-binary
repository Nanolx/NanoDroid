#!/sbin/sh

# Detect whether in boot mode
ps | grep zygote | grep -v grep >/dev/null && BOOTMODE=true || BOOTMODE=false
$BOOTMODE || ps -A 2>/dev/null | grep zygote | grep -v grep >/dev/null && BOOTMODE=true

umask 022
OUTFD=$2
ZIP=$3

ZIPDIR=$(dirname "${ZIP}")
MODID=NanoModfdroid

##########################################################################################
# Misc. Functions
##########################################################################################

ui_print() {
	if $BOOTMODE; then
		echo "$1"
	else 
		echo -n -e "ui_print $1\n" >> /proc/self/fd/$OUTFD
		echo -n -e "ui_print\n" >> /proc/self/fd/$OUTFD
	fi
}

grep_prop() {
	REGEX="s/^$1=//p"
	shift
	FILES=$@
	if [ -z "$FILES" ]; then
		FILES='/system/build.prop'
	fi
	cat $FILES 2>/dev/null | sed -n "$REGEX" | head -n 1
}

is_mounted() {
	if [ ! -z "$2" ]; then
		cat /proc/mounts | grep $1 | grep $2, >/dev/null
	else
		cat /proc/mounts | grep $1 >/dev/null
	fi
	return $?
}

set_perm() {
	chown $2:$3 $1 || exit 1
	chmod $4 $1 || exit 1
	if [ ! -z "$5" ]; then
		chcon $5 $1 2>/dev/null
	else
		chcon 'u:object_r:system_file:s0' $1 2>/dev/null
	fi
}

set_perm_recursive() {
	find $1 -type d 2>/dev/null | while read dir; do
		set_perm $dir $2 $3 $4 $6
	done
	find $1 -type f 2>/dev/null | while read file; do
		set_perm $file $2 $3 $5 $6
	done
}

set_perm_dir () {
	set_perm_recursive $1 root root 0755 0644
}

set_perm_data () {
	set_perm $1 root root 0644
}

set_perm_bin () {
	set_perm $1 root root 0755
}

detect_outfd () {
	readlink /proc/$$/fd/$OUTFD 2>/dev/null | grep /tmp >/dev/null
	if [ "$?" -eq "0" ]; then
		OUTFD=0

		for FD in `ls /proc/$$/fd`; do
			readlink /proc/$$/fd/$FD 2>/dev/null | grep pipe >/dev/null
			if [ "$?" -eq "0" ]; then
				ps | grep " 3 $FD " | grep -v grep >/dev/null
				if [ "$?" -eq "0" ]; then
					OUTFD=$FD
					break
				fi
			fi
		done
	fi
}

error () {
	ui_print "${@}"
	if [ "${MODE}" = "MAGISK" ]; then
		rm -rf "${MODPATH}"
		magisk_install_cleanup
	fi
	exit 1
}

##########################################################################################
# Architecture detection
##########################################################################################

detect_arch () {
	API=`grep_prop ro.build.version.sdk`
	ABI=`grep_prop ro.product.cpu.abi | cut -c-3`
	ABI2=`grep_prop ro.product.cpu.abi2 | cut -c-3`
	ABILONG=`grep_prop ro.product.cpu.abi`

	SDK_VERSION=$(awk -F= '/^ro.build.version.sdk/{print $2}' /system/build.prop)

	ARCH=arm
	IS64BIT=false

	if [ "$ABI" = "x86" ]; then
		ARCH=x86
	fi;

	if [ "$ABI2" = "x86" ]; then
		ARCH=x86
	fi;

	if [ "$ABILONG" = "arm64-v8a" ]; then
		ARCH=arm64
		IS64BIT=true
	fi

	if [ "$ABILONG" = "x86_64" ]; then
		ARCH=x64
		IS64BIT=true
	fi

	case ${ARCH} in
		arm )		BIN_ARCH="arm"	;;
		arm64 )		BIN_ARCH="arm"	;;
		x86 )		BIN_ARCH="x86"	;;
		x86_64 )	BIN_ARCH="x86"	;;
	esac

	case ${SDK_VERSION} in
		19 )		GSYNC_VER=K	;;
		21 | 22 )	GSYNC_VER=L	;;
		23 )		GSYNC_VER=M	;;
		24 | 25 )	GSYNC_VER=N	;;
		26 )		GSYNC_VER=O	;;
		* )	GSYNC_UNSUPPORTED=1	;;
	esac

	if [[ "${SDK_VERSION}" -lt 21 ]]; then
		UNFOLD_APP_DIR=1
	else	UNFOLD_APP_DIR=0
	fi

	if [[ "${SDK_VERSION}" -lt 19 ]]; then
		ui_print " "
		ui_print " ++ Installing on pre-KitKat ROM, full"
		ui_print " ++ compatibility is not garantueed!"
		ui_print " "
	fi
}

##########################################################################################
# Magisk Mode Installation (fallback functions)
##########################################################################################

grow_magisk_img () {
	e2fsck -yf ${IMG}
	resize2fs -f ${IMG} ${newSizeM}M
	e2fsck -yf ${IMG}
}

shrink_magisk_img () {
	e2fsck -yf ${IMG}
	resize2fs -f ${IMG} ${newSizeM}M
	e2fsck -yf ${IMG}
}

##########################################################################################
# Magisk Mode Installation
##########################################################################################

magisk_install_setup () {
	ui_print "******************************"
	ui_print "Powered by Magisk (@topjohnwu)"
	ui_print "******************************"
	ui_print " "
	ui_print " > setup Magisk environment"

	MAGISKBIN=/data/magisk

	MOUNTPATH=/magisk
	REALPATH=${MOUNTPATH}/${MODID}
	IMG=/data/magisk.img

	[ -d $MAGISKBIN -a -f $MAGISKBIN/magisk -a -f $MAGISKBIN/util_functions.sh ] || \
		error " !! Magisk version 14.0 or newer is required"

	. $MAGISKBIN/util_functions.sh

	MIN_VER=`grep_prop template $INSTALLER/module.prop`
	[ ! -z $MAGISK_VER_CODE -a $MAGISK_VER_CODE -ge $MIN_VER ] || \
		error " !! Magisk 14.0 or newer is required"

	if $BOOTMODE; then
		MOUNTPATH=/dev/magisk_merge
		IMG=/data/magisk_merge.img
	fi

	$BOOTMODE && ! is_mounted /magisk && error "! Magisk is not activated!"
	$BOOTMODE && boot_actions || recovery_actions

	request_size_check "${INSTALLER}"

	if [ -f "$IMG" ]; then
		image_size_check "${IMG}"
		if [ "$reqSizeM" -gt "$curFreeM" ]; then
			newSizeM=$(((reqSizeM + curUsedM) / 32 * 32 + 64))
			$MAGISKBIN/magisk --resizeimg $IMG $newSizeM || grow_magisk_img
		fi
	else
		newSizeM=$((reqSizeM / 32 * 32 + 64))
		$MAGISKBIN/magisk --createimg $IMG $newSizeM
	fi

	MAGISKLOOP=`$MAGISKBIN/magisk --mountimg $IMG $MOUNTPATH`
	is_mounted $MOUNTPATH || error " !! $IMG mount failed... abort"

	MODPATH=$MOUNTPATH/$MODID
	rm -rf "${MODPATH}"

	rm -rf "${MODPATH}"
	mkdir -p "${MODPATH}/system/app"
	mkdir -p "${MODPATH}/system/priv-app"
}

magisk_install_finish () {
	# Magisk Module files
	mktouch $MODPATH/auto_mount
	cp -af $INSTALLER/module.prop $MODPATH/module.prop

	if $BOOTMODE; then
		# Update info for Magisk Manager
		mktouch /magisk/$MODID/update
		cp -af $INSTALLER/module.prop /magisk/$MODID/module.prop
	fi
}

magisk_install_cleanup () {
	$MAGISKBIN/magisk --umountimg $MOUNTPATH $MAGISKLOOP

	image_size_check $IMG
	newSizeM=$((curUsedM / 32 * 32 + 64))
	if [ $curSizeM -gt $newSizeM ]; then
		$MAGISKBIN/magisk --resizeimg $IMG $newSizeM || shrink_magisk_img
	fi

	$BOOTMODE || recovery_cleanup
}

##########################################################################################
# Generic Installation
##########################################################################################

install_init () {
	mkdir -p $TMPDIR 2>/dev/null

	ui_print " "
	ui_print "******************************"
	ui_print "     NanoMod 14.8.99999999    "
	ui_print "      created by @Nanolx      "
	ui_print "       F-Droid package        "
	ui_print "******************************"
	ui_print " "

	INSTALLER=$TMPDIR/$MODID
	mkdir -p ${INSTALLER} || error " !! failed to prepare environment!"

	ui_print " > prepare installation"
	unzip -o "$ZIP" -d "${INSTALLER}" || error " !! failed to prepare environment!"
}

install_fdroid () {
	ui_print " << installing F-Droid"
	nanomod_install /system/app/FDroid /system/app/
	nanomod_libs app/FDroid
	nanomod_install /system/priv-app/FDroidPrivileged /system/priv-app/
	nanomod_libs priv-app/FDroidPrivileged
}

##########################################################################################
# NanoMod Configuration File Handling
##########################################################################################

# check for configuration files
config_locations="/sdcard /external_sd ${ZIPDIR} /data"

get_config () {
	config=""
	config_exists=0
	for path in ${config_locations}; do
		if test -r "${path}/${1}" -a -f "${path}/${1}"; then
			config="${path}/${1}"
			config_exists=1
			return
		fi
	done
}

set_prop () {
	echo "${1}=${2}" >> ${nanomodsetup}
}

# check whether '.nanomod-setup' has all required entries
check_nanomodsetup () {
	if grep -q "nanomod\." "${nanomodsetup}"; then
		ui_print " ++ migrating ${nanomodsetup} to new format"
		sed -e 's/nanomod\./nanomod_/g' -i "${nanomodsetup}"
		source "${nanomodsetup}"
	fi

	source ${nanomodsetup}

	[ -z ${nanomod_forcesystem} ] && set_prop nanomod_forcesystem 0

	source ${nanomodsetup}
}

##########################################################################################
# Advanced Installation Functions
##########################################################################################

nanomod_install () {
	source=${INSTALLER}${1}
	destination=${MODPATH}${2}
	perm=$3

	if [ -d ${source} ]; then
		if [ "${UNFOLD_APP_DIR}" -eq 1 -a -f ${source}/*.apk ]; then
			echo "    file: ${source}.apk > ${destination}"

			cp ${source}/*.apk ${destination} || \
				error " !! failed to install ${source}.apk to ${destination}"

			set_perm_data ${destination}$(basename ${source}).apk

			if [ "${MODE}" = "SYSTEM" ]; then
				echo ${destination}$(basename ${source}).apk >> /system/.nanomod-list
			fi
		else
			echo "    dir: ${source} > ${destination}"

			cp -r ${source} ${destination} || \
				error " !! failed to install ${source} to ${destination}"

			set_perm_dir ${destination}$(basename ${source})

			if [ "${MODE}" = "SYSTEM" ]; then
				find "${source}" -type f >> /system/.nanomod-list
			fi
		fi
	elif [ -f ${source} ]; then
		echo "    file: ${source} > ${destination}"

		cp ${source} ${destination} || \
			error " !! failed to install ${source} to ${destination}"

		if [[ -f ${destination} ]]; then
			nanomod_substitute ${destination}
		elif [[ -f ${destination}$(basename ${source}) ]]; then
			nanomod_substitute ${destination}$(basename ${source})
		fi

		case ${perm} in
			bin )
				echo "      setting permissions: binary"
				if [ -f ${destination} ]; then
					set_perm_bin ${destination}
				elif [ -f ${destination}$(basename ${source}) ]; then
					set_perm_bin ${destination}$(basename ${source})
				fi
			;;
			* )
				echo "      setting permissions: data"
				if [ -f ${destination} ]; then
					set_perm_data ${destination}
				elif [ -f ${destination}$(basename ${source}) ]; then
					set_perm_data ${destination}$(basename ${source})
				fi
			;;
		esac

		if [ "${MODE}" = "SYSTEM" ]; then
			if [ -f ${destination} ]; then
				echo ${destination} >> /system/.nanomod-list
			elif [ -f ${destination}$(basename ${source}) ]; then
				echo ${destination}$(basename ${source}) >> /system/.nanomod-list
			fi
		fi
	else	error " !! file ${source} not found"
	fi
}

nanomod_libs () {
	if [ "${UNFOLD_APP_DIR}" -eq 1 ]; then
		apk=${MODPATH}/system/${1}.apk
		case ${ARCH} in
			arm | x86 )      libd=/system/lib   ;;
			arm64 | x86_64 ) libd=/system/lib64 ;;
		esac
	else
		apk=${MODPATH}/system/${1}/*.apk
		libd=${MODPATH}/system/${1}/lib
		lib_arch=${ARCH}
	fi

	tmpd=${TMPDIR}/nanomod-lib

	rm -rf ${tmpd}
	mkdir ${tmpd}

	srcdir=""

	if [ ! -f ${apk} ]; then
		error " !! apk ${apk} not found"
	fi

	"${INSTALLER}/system/xbin/unzip.${BIN_ARCH}" \
		-oq ${apk} "lib/*" -d "${tmpd}" \
		2>/dev/null
	unzip_return=$?

	if [ ${unzip_return} -eq 0 ]; then
		echo "      $(basename ${apk}) does have libs"
	elif [ ${unzip_return} -eq 11 ]; then
		echo "      $(basename ${apk}) does not have any libs"
	else	error "  !! installing libs for $(basename ${apk}) failed"
	fi

	if [ -d ${tmpd}/lib ]; then
		case ${ARCH} in
			arm )
				if [ -d ${tmpd}/lib/armeabi-v7a ]; then
					srcdir=${tmpd}/lib/armeabi-v7a
				elif [ -d ${tmpd}/lib/armeabi ]; then
					srcdir=${tmpd}/lib/armeabi
				fi
			;;
			arm64 )
				if [ -d ${tmpd}/lib/arm64-v8a ]; then
					srcdir=${tmpd}/lib/arm64-v8a
				elif [ -d ${tmpd}/lib/armeabi-v7a ]; then
					srcdir=${tmpd}/lib/armeabi-v7a
					lib_arch=arm
				elif [ -d ${tmpd}/lib/armeabi ]; then
					srcdir=${tmpd}/lib/armeabi
					lib_arch=arm
				fi
			;;
			x86 )
				if [ -d ${tmpd}/lib/x86 ]; then
					srcdir=${tmpd}/lib/x86
				elif [ -d ${tmpd}/lib/armeabi-v7a ]; then
					srcdir=${tmpd}/lib/armeabi-v7a
					lib_arch=arm
				elif [ -d ${tmpd}/lib/armeabi ]; then
					srcdir=${tmpd}/lib/armeabi
					lib_arch=arm
				fi
			;;
			x86_64 )
				if [ -d ${tmpd}/lib/x86_64 ]; then
					srcdir=${tmpd}/lib/x86_64
				elif [ -d ${tmpd}/lib/x86 ]; then
					srcdir=${tmpd}/lib/x86
					lib_arch=x86
				elif [ -d ${tmpd}/lib/armeabi-v7a ]; then
					srcdir=${tmpd}/lib/armeabi-v7a
					lib_arch=arm
				elif [ -d ${tmpd}/lib/armeabi ]; then
					srcdir=${tmpd}/lib/armeabi
					lib_arch=arm
				fi
			;;
		esac

		if [ -d ${srcdir} ]; then
			case ${srcdir} in
				*arm64*  ) echo "      $(basename ${apk}): installing arm64 libs"  ;;
				*arm*	 ) echo "      $(basename ${apk}): installing arm libs"    ;;
				*x86_64* ) echo "      $(basename ${apk}): installing x86_64 libs" ;;
				*x86*	 ) echo "      $(basename ${apk}): installing x86 libs"    ;;
			esac

			echo "        into: ${libd}/${lib_arch}"
			mkdir -p ${libd}/${lib_arch}

			for lib in ${srcdir}/*; do
				echo "        library: $(basename ${lib})"
				cp ${lib} ${libd}/${lib_arch}/ || \
					error " !! installing libraries failed"

				set_perm_data ${libd}/${lib_arch}/$(basename ${lib})

				if [ "${MODE}" = "SYSTEM" ]; then
					echo ${libd}/${lib_arch}/$(basename ${lib}) \
						>> /system/.nanomod-list
				fi
			done
		fi
	fi
}

nanomod_substitute () {
	if grep -q @ZIPDIR@ ${1}; then
		if [[ "${ZIPDIR}" == "/external_sd" ]]; then
			# /external_sd is already know by `nanomod-overlay`
			# no need to add it a second time
			sed -e 's|@ZIPDIR@||' -i ${1}
			echo "    substitute: remove @ZIPDIR@ ${1}"
		else
			sed -e "s|@ZIPDIR@|${ZIPDIR}|g" -i ${1}
			echo "    substitute: adjust @ZIPDIR@ in ${1}"
		fi
	fi

	if grep -q @MODPATH@ ${1}; then
		sed -e "s|@MODPATH@|${REALPATH}|g" -i ${1}
		echo "    substitute: adjust @MODPATH@ in ${1}"
	fi
}

nanomod_finalize () {
	if [ "${MODE}" = "SYSTEM" ]; then
		sed -e "s,^${INSTALLER},,g" -i /system/.nanomod-list \
			|| error " !! failed to create uninstaller information"
		sed -e "s,/swipe/${ARCH},/system/${SWIPE_LIBDIR},g" -i /system/.nanomod-list \
			|| error " !! failed to create uninstaller information"
		sed -e "s,/gsync/${GSYNC_VER},/system,g" -i /system/.nanomod-list \
			|| error " !! failed to create uninstaller information"
		sed -e "s,/gsync/etc,/system/etc,g" -i /system/.nanomod-list \
			|| error " !! failed to create uninstaller information"
		sort /system/.nanomod-list | uniq > /system/.nanomod-list.tmp \
			|| error " !! failed to create uninstaller information"
		mv /system/.nanomod-list.tmp /system/.nanomod-list \
			|| error " !! failed to create uninstaller information"
	fi
}

##########################################################################################
# Flashable update-binary preparation
##########################################################################################

detect_outfd

umount /system 2>/dev/null
umount /data 2>/dev/null
umount /cache 2>/dev/null

mount -o ro /system 2>/dev/null
mount /data 2>/dev/null
mount /cache 2>/dev/null

if [ ! -f '/system/build.prop' ]; then
	error "! /system/build.prop does not exist"
fi

detect_arch

# This path should work in any cases
TMPDIR=/dev/tmp

install_init

get_config .nanomod-setup
if [ "$config_exists" -eq 1 ]; then
	NO_NANOMODSETUP=0
	nanomodsetup="${config}"
	check_nanomodsetup
else	NO_NANOMODSETUP=1
	nanomodsetup="${INSTALLER}/.nanomod-setup"
	source "${nanomodsetup}"
fi

if [ "${nanomod_forcesystem}" -eq 1 ]; then
	if ! ${BOOTMODE}; then
		MODE=SYSTEM
		MODE_TEXT=" > Mode   | System          | forced"
	else
		MODE=MAGISK
		MODE_TEXT=" > Mode   | Magisk          | forced"
	fi
elif [ -f /data/magisk/magisk  ]; then
	MODE=MAGISK
	MODE_TEXT=" > Mode   | Magisk          | detected"
else
	MODE=SYSTEM
	MODE_TEXT=" > Mode   | System          | detected"
fi

##########################################################################################
# Main
##########################################################################################

if [ "$NO_NANOMODSETUP" -eq 1 ]; then
	ui_print " > Config | nanomod-setup   | fallback"
else	ui_print " > Config | nanomod-setup   | $(dirname ${nanomodsetup})"
fi

ui_print "${MODE_TEXT}"
ui_print " "

# You can get the Android API version from $API, the CPU architecture from $ARCH
# Useful if you are creating Android version / platform dependent mods

if [ "${MODE}" = "MAGISK" ]; then
	magisk_install_setup
fi

if [ "${MODE}" = "SYSTEM" ]; then
	mount -orw,remount /system 2>/dev/null || \
		error "! failed to re-mount /system read-write"
	unset MODPATH
fi

# When installing in Magisk mode we are forced to use our own unzip
# for nanomod_libs() to work, use it in System mode aswell.
chmod +x "${INSTALLER}/system/xbin/unzip.${BIN_ARCH}"

install_fdroid

if [ "${MODE}" = "MAGISK" ]; then
	magisk_install_finish
fi

nanomod_finalize

rm -rf ${TMPDIR}

ui_print " "
ui_print " Thanks for using NanoMod "
ui_print " "

if [ "${MODE}" = "MAGISK" ]; then
	magisk_install_cleanup
elif ! ${BOOTMODE}; then
	umount /system 2>/dev/null
fi

exit 0
