#!/sbin/sh

OUTFD=$2
ZIP=$3

readlink /proc/$$/fd/$OUTFD 2>/dev/null | grep /tmp >/dev/null
if [ "$?" -eq "0" ]; then
  OUTFD=0

  for FD in `ls /proc/$$/fd`; do
    readlink /proc/$$/fd/$FD 2>/dev/null | grep pipe >/dev/null
    if [ "$?" -eq "0" ]; then
      ps | grep " 3 $FD " | grep -v grep >/dev/null
      if [ "$?" -eq "0" ]; then
        OUTFD=$FD
        break
      fi
    fi
  done
fi

ui_print() {
  echo -n -e "ui_print $@\n" >> /proc/self/fd/$OUTFD
  echo -n -e "ui_print\n" >> /proc/self/fd/$OUTFD
}

is_mounted() {
  if [ ! -z "$2" ]; then
    cat /proc/mounts | grep $1 | grep $2, >/dev/null
  else
    cat /proc/mounts | grep $1 >/dev/null
  fi
  return $?
}

error () {
	ui_print "${@}"
	ui_print " "
	ui_print " ** post your /tmp/recovery.log"
	ui_print " ** in the XDA support thread"
	ui_print " "
	exit 1
}

request_size_check() {
  reqSizeM=`unzip -l "$1" 2>/dev/null | tail -n 1 | awk '{ print $1 }'`
  reqSizeM=$((reqSizeM / 1048576 + 1))
}

image_size_check() {
  e2fsck -yf $1
  curBlocks=`e2fsck -n $1 2>/dev/null | grep $1 | cut -d, -f3 | cut -d\  -f2`;
  curUsedM=`echo "$curBlocks" | cut -d/ -f1`
  curSizeM=`echo "$curBlocks" | cut -d/ -f1`
  curFreeM=$(((curSizeM - curUsedM) * 4 / 1024))
  curUsedM=$((curUsedM * 4 / 1024 + 1))
  curSizeM=$((curSizeM * 4 / 1024))
}

shrink_magisk_img () {
	image_size_check /data/magisk.img
	NEWDATASIZE=$((curUsedM / 32 * 32 + 32))
	if [ "$curSizeM" -gt "$NEWDATASIZE" ]; then
		resize2fs $IMG ${NEWDATASIZE}M
	fi
}

mount_image() {
	if [ ! -d "$2" ]; then
		mount -o rw,remount rootfs /
		mkdir -p "$2" 2>/dev/null
		$BOOTMODE && mount -o ro,remount rootfs /
		[ ! -d "$2" ] && return 1
	fi

	if ! is_mounted "$2"; then
		LOOPDEVICE=
		for LOOP in 0 1 2 3 4 5 6 7; do
			if ! is_mounted "$2"; then
				LOOPDEVICE=/dev/block/loop$LOOP
				[ -e $LOOPDEVICE ] || mknod $LOOPDEVICE b 7 $LOOP 2>/dev/null
				losetup $LOOPDEVICE "$1" && mount -t ext4 -o loop $LOOPDEVICE "$2"
				if is_mounted "$2"; then
					break;
				fi
			fi
		done
	fi
}

# check for configuration files
config_locations="/sdcard /external_sd /data $(dirname ${ZIP}))"
config_files=".nanomod-setup .nanomod-apps .nanomod-overlay"

ui_print " "
ui_print "********************************"
ui_print "      NanoMod 14.9.20171213     "
ui_print "       created by @Nanolx       "
ui_print "           Uninstaller          "
ui_print "********************************"
ui_print " "

if ! (is_mounted /data); then
	mount -orw /data || error " !! failed to mount /data"
else	mount -orw,remount /data || error " !! failed to re-mount /data read-write"
fi

ui_print " << Removing configuration files (if any)"

for path in ${config_locations}; do
	for file in ${config_files}; do
		if test -r "${path}/${file}" -a -f "${path}/${file}"; then
			rm -fv "${path}/${file}"
			ui_print " <<> removing ${path}/${file}"
		fi
	done
done

if ! (is_mounted /system); then
	mount -orw /system || error " !! failed to mount /system"
else	mount -orw,remount /system || error " !! failed to re-mount /system read-write"
fi

if [ -f /system/.nanomod-list ]; then
	ui_print " << uninstalling: NanoMod (System)"

	# services.jar needs special treament
	if grep -q /system/framework/services.jar /system/.nanomod-list; then
		if [ -f /sdcard/services.jar ]; then
			ui_print " << restoring: unpatched services.jar"
			mv /sdcard/services.jar /system/framework/services.jar \
				|| error " !! failed to restore services.jar"
		else	ui_print " << can't restore unpatched services.jar"
		fi
		sed '/\/system\/framework\/services.jar/d' -i /system/.nanomod-list
	fi

	# Settings.apk needs special treament
	if grep -q /system/priv-app/Settings.apk/Settings.apk /system/.nanomod-list; then
		if [ -f /sdcard/Settings.apk ]; then
			ui_print " << restoring: unpatched Settings.apk"
			mv /sdcard/Settings.apk /system/priv-app/Settings.apk/Settings.apk \
				|| error " !! failed to restore Settings.apk"
		else	ui_print " << can't restore unpatched Settings.apk"
		fi
		sed '/\/system\/priv-app\/Settings\/Settings.apk/d' -i /system/.nanomod-list
	fi

	# SecSettings.apk needs special treament
	if grep -q /system/priv-app/SecSettings/SecSettings.apk /system/.nanomod-list; then
		if [ -f /sdcard/SecSettings.apk ]; then
			ui_print " << restoring: unpatched SecSettings.apk"
			mv /sdcard/SecSettings.apk /system/priv-app/SecSettings/SecSettings.apk \
				|| error " !! failed to restore SecSettings.apk"
		else	ui_print " << can't restore unpatched SecSettings.apk"
		fi
		sed '/\/system\/priv-app\/SecSettings\/SecSettings.apk/d' -i /system/.nanomod-list
	fi

	# SecSettings2.apk needs special treament
	if grep -q /system/priv-app/SecSettings2/SecSettings2.apk /system/.nanomod-list; then
		if [ -f /sdcard/SecSettings2.apk ]; then
			ui_print " << restoring: unpatched SecSettings2.apk"
			mv /sdcard/SecSettings2.apk /system/priv-app/SecSettings2/SecSettings2.apk \
				|| error " !! failed to restore SecSettings2.apk"
		else	ui_print " << can't restore unpatched SecSettings2.apk"
		fi
		sed '/\/system\/priv-app\/SecSettings2\/SecSettings2.apk/d' -i /system/.nanomod-list
	fi

	# com.qualcomm.location needs special treament
	if [ -d /sdcard/com.qualcomm.location ]; then
		ui_print " << restoring: com.qualcomm.location"
		mv /sdcard/com.qualcomm.location /system/priv-app/ \
			|| error " !! failed to restore com.qualcomm.lcation"
	fi

	xargs rm -f < /system/.nanomod-list \
		|| " !! failed to remove files"
	ui_print " << uninstalling: /system/.nanomod-list"

	# remove empty directories
	# (find -empty not available on Android)
	for dir in app priv-app share; do
		find /system/${dir} -type d | \
			xargs rmdir --ignore-fail-on-non-empty
	done

	rm -f /system/.nanomod-list
fi

if [ -f /system/.nanomod-patcher ]; then
	rm -f /system/.nanomod-patcher
	ui_print " << uninstalling: /system/.nanomod-patcher"
fi

if [ -f /system/addon.d/75-nanomodpatcher.sh ]; then
	ui_print " << uninstalling: patcher addon.d"
	rm /system/addon.d/75-nanomodpatcher.sh
	rm -rf /data/nanomod.patcher
fi

if [ -f /data/magisk.img ]; then
	mount_image /data/magisk.img /magisk || \
		error " !! failed to mount /magisk"

	if [ -d /magisk/NanoMod ]; then
		ui_print " <<  uninstalling: NanoMod (Magisk/Full)"
		rm -rf /magisk/NanoMod
	fi

	if [ -d /magisk/NanoModfdroid ]; then
		ui_print " <<  uninstalling: NanoMod (Magisk/F-Droid)"
		rm -rf /magisk/NanoModfdroid
	fi

	if [ -d /magisk/NanoModmicroG ]; then
		ui_print " <<  uninstalling: NanoMod (Magisk/microG)"
		rm -rf /magisk/NanoModmicroG
	fi
fi

ui_print " >> clean up"

if (is_mounted /magisk); then
	umount /magisk
	losetup -d $LOOPDEVICE
	rmdir /magisk
	shrink_magisk_img || \
		error " !! failed to shrink magisk.img"
fi

umount /data
umount /system

ui_print " "
ui_print " > Done!"
ui_print " "
ui_print "Thanks for giving NanoMod a try"
ui_print " "

exit 0
